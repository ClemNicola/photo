---
  export interface Props {
    maxCounter: number
    seconds: number
    className?: string
    counter: number
  }

  const {maxCounter = 100, seconds = 2.7, counter = 0,  className = ""} = Astro.props
  const id = `counter-${Math.random().toString(36).substring(2)}`
---
<span
  id={id}
  class:list={["counter-animation reveal", className]}
  data-max-counter={maxCounter}
  data-seconds={seconds}
>
  {counter}
</span>

<style>
  .counter-animation {
    display: inline-block;
  }
</style>

<script>
  import gsap from 'gsap';
  import { hasTextAnimated } from '../../stores/animationStore';

  class CounterAnimation {
    private element: HTMLElement
    private maxCounter: number
    private seconds: number
    private counter: number = 0
    private interval: ReturnType<typeof setInterval> | null = null

    constructor(element: HTMLElement){
      this.element = element
      this.maxCounter = Number(element.dataset.maxCounter) || 100
      this.seconds = Number(element.dataset.seconds) || 4
    }

    public async startCounter(){
      const intervalTime = (this.seconds * 1000) / this.maxCounter
      this.interval = setInterval(() => {
        this.counter++
        this.element.textContent = this.counter.toString()

        if(this.counter >= this.maxCounter) {
          if(this.interval) clearInterval(this.interval)
          // Animation de disparition vers le bas après un délai
          setTimeout(() => {
            this.animateOut()
          }, 300)
        }
      }, (intervalTime));
    }

    private async animateOut() {
      await gsap.to(this.element, {
        opacity: 0,
        y: '100%',
        duration: 0.5,
        ease: 'power2.in'
      })
    }

    public stop(){
      if(this.interval){
        clearInterval(this.interval)
        this.element.textContent = this.maxCounter.toString()
      }
    }

    public showFinal() {
      this.element.textContent = this.maxCounter.toString()
      gsap.set(this.element, { opacity: 0, y: '100%' })
    }
  }

  function initializeCounter() {
    const counterElements = document.querySelectorAll('.counter-animation')
    
    
    if (hasTextAnimated.get()) {
      counterElements.forEach(element => {
        if (element instanceof HTMLElement) {
          const counter = new CounterAnimation(element)
          counter.showFinal()
        }
      })
      return
    }

    const counters = Array.from(counterElements).map(element => {
      if(element instanceof HTMLElement){
        const counter = new CounterAnimation(element)
        counter.startCounter()
        return counter
      }
    })

    setTimeout(() => {
      counters.forEach(counter => counter?.stop());
    }, 3000);
  }
  document.addEventListener('astro:page-load', () => {
    initializeCounter();
  });
</script>
