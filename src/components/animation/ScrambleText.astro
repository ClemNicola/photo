---
export interface Props {
  text: string;
  className?: string;
  delay?: number;
}
const { text, className = '', delay = 0 } = Astro.props;
const id = `scramble-${Math.random().toString(36).substring(2)}`;

---

<span
  id={id}
  class:list={[
    'animated-text',
    'font-loading',
    className
  ]}
  data-original-text={text}
  data-delay={delay}
>
  {text}
</span>

<style>
  .animated-text {
    display: inline-block;
  }
  .char {
    display: inline-block;
  }
</style>

<script>
  import SplitType from 'split-type';
  import gsap from 'gsap';
  import { hasTextAnimated } from '../../stores/animationStore';

  class TextAnimator {
    private element: HTMLElement;
    private originalText: string;
    private letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    private interval: ReturnType<typeof setInterval> | null = null;
    private splitText: SplitType | null = null;
    private scramblesIntervals: number[] = [];

    constructor(element: HTMLElement) {
      this.element = element;
      this.originalText = element.dataset.originalText || element.innerText;
      this.splitText = new SplitType(element);
    }

    applyFinalClasses() {
      if (!this.splitText?.chars) return;
      
      this.splitText.chars.forEach((char) => {
        char.classList.remove('font-loading');
        if (char.closest('.special')) {
          char.classList.add('font-titleita');
        } else {
          char.classList.add('font-custom');
        }
      });
    }

    async animate(duration = 3000) {
      if (!this.splitText?.chars) return;
      const scrambleDuration = duration - 300;

      gsap.set(this.splitText.chars, {
        opacity: 1,
        y: 0,
      });

      this.splitText.chars.forEach((char, index) => {
        const intervalId = window.setInterval(() => {
          char.textContent = this.letters[Math.floor(Math.random() * this.letters.length)];
        }, 100);
        this.scramblesIntervals.push(intervalId);
      });

      await new Promise((resolve) => setTimeout(resolve, scrambleDuration));

      this.scramblesIntervals.forEach((interval) => clearInterval(interval));

      await gsap.to(this.splitText.chars, {
        opacity: 0,
        y: '100%',
        stagger: 0.01,
        ease: 'power2.in',
      });

      this.splitText.chars.forEach((char, index) => {
        char.textContent = this.originalText[index];
      });

      gsap.set(this.splitText.chars, {
        opacity: 0,
        y: '100%',
      });

      await gsap.to(this.splitText.chars, {
        opacity: 1,
        y: 0,
        stagger: 0.01,
        ease: 'power2.out',
        delay: 0.5,
        onStart: () => {
          this.applyFinalClasses();
        },
      });
    }

    cleanup() {
      this.scramblesIntervals.forEach((interval) => clearInterval(interval));
    }
  }

  function applyFinalFontClasses() {
    const elements = document.querySelectorAll('.animated-text');
    elements.forEach((element) => {
      if (element instanceof HTMLElement) {
        element.classList.remove('font-loading');
        if (element.closest('.special')) {
          element.classList.add('font-titleita');
        } else {
          element.classList.add('font-custom');
        }
        
        // Appliquer aussi aux chars si elles existent
        const chars = element.querySelectorAll('.char');
        chars.forEach((char) => {
          if (char instanceof HTMLElement) {
            char.classList.remove('font-loading');
            if (char.closest('.special')) {
              char.classList.add('font-titleita');
            } else {
              char.classList.add('font-custom');
            }
          }
        });
      }
    });
  }

  function initializeAnimations() {
    const elements = document.querySelectorAll('.animated-text');
    console.log('hasTextAnimated:', hasTextAnimated.get());

    // Si l'animation a déjà été jouée, appliquer directement les classes finales
    if (hasTextAnimated.get()) {
      applyFinalFontClasses();
      return;
    }

    // Sinon, lancer l'animation
    const animators = Array.from(elements).map((element) => {
      if (element instanceof HTMLElement) {
        return new TextAnimator(element);
      }
    });

    const startAnim = async () => {
      console.log('Starting animations for', animators.length, 'elements');
      
      const promises = animators
        .filter((anim) => anim !== undefined)
        .map((anim) => anim!.animate());
      
      await Promise.all(promises);
      
      // Marquer l'animation comme terminée
      hasTextAnimated.set(true);
      console.log('All animations completed, store updated');
    };

    let imagesLoaded = false;
    let timeoutReached = false;

    setTimeout(() => {
      timeoutReached = true;
      if (imagesLoaded) {
        startAnim().catch(console.error);
      }
    }, 0);

    window.addEventListener('load', () => {
      console.log('Window loaded');
      imagesLoaded = true;
      if (timeoutReached) {
        startAnim().catch(console.error);
      }
    });
  }

  // Initialize on DOMContentLoaded
  document.addEventListener('DOMContentLoaded', () => {
    initializeAnimations();
  });

  // Also initialize on Astro page load (for SPA navigation)
  document.addEventListener('astro:page-load', () => {
    initializeAnimations();
  });
</script>
