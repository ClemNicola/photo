---
export interface Props {
  text: string
  className?: string
  delay?: number
}
const {text, className = "", delay = 0} = Astro.props
const id = `scramble-${Math.random().toString(36).substring(2)}`
---
<span
  id={id}
  class:list={["scramble-text reveal", className]}
  data-original-text={text}
  data-delay={delay}
>
  {text}
</span>

<script>
   class ScrambleEffect {
      private element: HTMLElement
      private originalText: string
      private letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      private interval: ReturnType<typeof setInterval> | null = null

      constructor(element: HTMLElement){
        this.element = element
        this.originalText = element.dataset.originalText || element.innerText
      }

      start(duration = 3000){
        let elapsedTime = 0
        const intervalTime = 50

        this.interval = setInterval(() => {
          elapsedTime += intervalTime
          this.element.innerText = this.originalText
             .split("")
             .map((letter, index) => {
                if(elapsedTime >= duration) return this.originalText[index]
                return this.letters[Math.floor(Math.random() * this.letters.length)]
             })
             .join("")

             if(elapsedTime >= duration){
               if(this.interval) clearInterval(this.interval)
                this.element.textContent = this.originalText
              }
        }, intervalTime);

      }
   }

   function initializeScrambleEffect() {
      const elements = document.querySelectorAll('.scramble-text')
      const scrambles = Array.from(elements).map((element) => {
        if(element instanceof HTMLElement){
          return new ScrambleEffect(element)
        }
      })

      const startScramble = () => scrambles.forEach((scramble) => scramble?.start(3000))

      let imagesLoaded = false;
      let timeoutReached = false;

      setTimeout(() => {
        timeoutReached = true
        if(imagesLoaded) startScramble()
      }, 0);

      window.addEventListener('load', () => {
        imagesLoaded = true
        if(timeoutReached) startScramble()
      })
   }

   document.addEventListener('DOMContentLoaded', initializeScrambleEffect)
</script>
