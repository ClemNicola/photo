---
import{Curtains, Plane} from 'curtainsjs'

export interface Props {
    image: string
    className: string
}

window.addEventListener('astro:page-load', () => {


    const curtains = new Curtains({
        container: 'canvas'
    })

    const planes = document.getElementsByClassName('liquide-plane')
    
    const params = {
        vertexShaderID: 'plane-vs',
        fragmentShaderID: 'plane-fs',
        uniforms: {
            uTime: {
                name: 'uTime',
                type: '1f',
                value: 0
            }
        }
    }
    
    const plane = new Plane(curtains,planes, params)

    plane.onRender(() => {
        plane.uniforms.uTime.value++
    })
})

const {image, className} = Astro.props

---

<div id="canvas" class="absolute top-0 left-0 right-0 bottom-0">
    <div class="liquide-plane">
        <img src={image} class={className} crossorigin="anonymous"/>
    </div>
</div>



<script id="plane-vs" type="x-shader/x-vertex">
 precision mediump float;
 attribute vec3 aVertexPosition;
 attribute vec2 aTextureCoord;

 uniform mat4 uMVMatrix;
 uniform mat4 uPMatrix;
 uniform mat4 uTextureMatrix0;

varying vec3 vVertexPosition;
 varying vec2 vTextureCoord;

 void main(){
    vec3 vertexPosition = aVertexPosition;
    gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);
    vTextureCoord = (uTextureMatrix0 * vec4(aTextureCoord, 0.0, 1.0)).xy;
    vVertexPosition = vertexPosition;
 }
</script>

<script id="plane-fs" type="x-shader/x-fragment">
    precision mediump float;

    varying vec3 vVertexPosition;
    varying vec2 vTextureCoord;

    uniform float uTime;   

    uniform sampler2D uSampler0;

    void main(){
        vec2 textureCoord = vTextureCoord;
        textureCoord.x += sin(textureCoord.y * 25.0) * cos(textureCoord.x * 25.0) * (cos(uTime / 50.0));
        gl_FragColor = texture2D(uSampler0, textureCoord);
    }
</script>