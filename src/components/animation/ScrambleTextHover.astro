---
export interface Props {
  text: string;
  className?: string;
  delay?: number;
}

const { text, className = '', delay = 0 } = Astro.props;
---

<span class={`scramble-text ${className}`} data-delay={delay}>
  {text}
</span>

<script>
  class ScrambleText {
    chars = 'abcdefghijklmnopqrst';
    iterations = 10;
    originalText: string;
    element: HTMLElement;
    delay: number;
    interval: number | null = null;

    constructor(element: HTMLElement) {
      this.element = element;
      this.originalText = element.textContent || '';
      this.delay = parseInt(element.dataset.delay || '0');
    }

    scramble() {
      const finalText = this.originalText;
      let iteration = 0;
      this.interval = window.setInterval(() => {
        if (iteration >= this.iterations) {
          clearInterval(this.interval as number);
          this.element.textContent = finalText;
          return;
        }
        this.element.textContent = finalText
          .split('')
          .map(() => this.chars[Math.floor(Math.random() * this.chars.length)])
          .join('');
        iteration++;
      }, 80);
    }
  }

  document.addEventListener('astro:page-load', () => {
    const elements = document.querySelectorAll<HTMLElement>('.scramble-text');
    elements.forEach((element) => {
      const scrambleText = new ScrambleText(element);
      element.addEventListener('mouseenter', () => {
        scrambleText.scramble();
      });
    });
  });
</script>
