---
import Layout from '../../layouts/Layout.astro';
import NavBar from '../../components/NavBar.astro';
import TransitionPage from '../../components/animation/TransitionPage.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

const photos: CollectionEntry<'photos'>[] = await getCollection('photos');
const sortedPhotos = photos.sort((a, b) => a.data.category.localeCompare(b.data.category));

const duplicatedPhotos = [...sortedPhotos, ...sortedPhotos, ...sortedPhotos, ...sortedPhotos];
---

<Layout title="Overview" color="bg-creme">
    <TransitionPage title="Overview" color="bg-orange" textColor="text-creme">
        <NavBar color="text-orange" />
        
        <div class="infinite-scroll-wrapper relative overflow-hidden">
            <div 
                class="
                    grid 
                    grid-cols-2 
                    sm:grid-cols-2 
                    md:grid-cols-3 
                    lg:grid-cols-4 
                    xl:grid-cols-5
                    gap-x-2 
                    gap-y-4 
                    xs:gap-x-3 
                    xs:gap-y-5
                    sm:gap-x-6 
                    sm:gap-y-8 
                    md:gap-x-8 
                    md:gap-y-10 
                    lg:gap-x-12 
                    lg:gap-y-12 
                    infinite-scroll-container 
                    p-2 
                    xs:p-3
                    sm:p-6 
                    md:p-8 
                    lg:p-12
                "
            >
                {duplicatedPhotos.map((photo, index) => (
                    <div 
                        class={`
                            max-w-full 
                            h-auto 
                            block 
                            justify-center 
                            items-center 
                            transform
                            ${
                                index % 4 === 0 ? 'translate-x-0.5 translate-y-0.5 sm:translate-x-1 sm:translate-y-1 md:translate-x-2 md:translate-y-2' :
                                index % 4 === 1 ? '-translate-x-0.5 -translate-y-0.5 sm:-translate-x-1 sm:-translate-y-1 md:-translate-x-2 md:-translate-y-2' :
                                index % 4 === 2 ? 'translate-x-0.5 translate-y-0.5 sm:translate-x-1 sm:translate-y-1 md:translate-x-2 md:translate-y-2' :
                                '-translate-x-0.5 -translate-y-0.5 sm:-translate-x-1 sm:-translate-y-1 md:-translate-x-2 md:-translate-y-2'
                            }
                        `}
                        data-index={index}
                    >
                        <div id={`scroll-distortion-${index}`} class="relative overflow-hidden group">
                            <div class={`scroll-distortion-plane-${index}`}>
                                <a href={`/category/${photo.data.category}/${photo.data.id}`} class="block relative">
                                    <img 
                                        src={photo.data.image} 
                                        alt={photo.data.title}
                                        loading="lazy"
                                        class="
                                            w-full 
                                            h-auto 
                                            aspect-[3/4] 
                                            object-cover 
                                            transition-transform 
                                            duration-500
                                            group-hover:translate-x-full 
                                            scroll-translate-img
                                            min-h-[140px]
                                            xs:min-h-[160px]
                                            sm:min-h-[180px]
                                            md:min-h-[200px]
                                            lg:min-h-[240px]
                                            xl:min-h-[220px]
                                        "
                                    />
                                    <div class="
                                        absolute 
                                        inset-0 
                                        flex 
                                        items-center 
                                        justify-center 
                                        transition-transform
                                        duration-500 
                                        -translate-x-full 
                                        group-hover:translate-x-0
                                        bg-creme/90
                                        backdrop-blur-sm
                                    ">
                                        <h3 class="
                                            font-titleita 
                                            text-orange 
                                            text-xs
                                            xs:text-sm 
                                            sm:text-base 
                                            md:text-lg 
                                            font-semibold 
                                            text-center 
                                            px-1
                                            xs:px-2 
                                            sm:px-3
                                            leading-tight
                                        ">
                                            {photo.data.title}
                                        </h3>
                                    </div>
                                </a>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    </TransitionPage>
</Layout>

<script>
    import Lenis from 'lenis';

    let lenis: Lenis;
    let effectCanvas: any = null;
    let scrollVelocity = 0;
    let scrollTimeout: ReturnType<typeof setTimeout>;
    let isScrolling = false;

    function initInfiniteScroll() {
        if (lenis) {
            lenis.destroy();
        }

        if (effectCanvas) {
            effectCanvas.destroy();
            effectCanvas = null;
        }

        lenis = new Lenis({
            duration: 0.9,
            easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
            orientation: 'vertical',
            gestureOrientation: 'vertical',
            smoothWheel: true,
            wheelMultiplier: 0.8,
            touchMultiplier: 1.5,
            infinite: true
        });

        lenis.on('scroll', (e: any) => {
            scrollVelocity = e.velocity || 0;
            
            const images = document.querySelectorAll('.infinite-scroll-container img');
            images.forEach((img: any) => {
                const isMobile = window.innerWidth < 768;
                const multiplier = isMobile ? 2 : 3;
                const maxTranslate = isMobile ? 10 : 15;
                const translateY = Math.min(Math.abs(scrollVelocity) * multiplier, maxTranslate);
                // Store the scroll translateY value as a CSS custom property
                img.style.setProperty('--scroll-translate-y', `${scrollVelocity > 0 ? translateY : -translateY}px`);
            });
            
            isScrolling = true;
            clearTimeout(scrollTimeout);
            
            scrollTimeout = setTimeout(() => {
                isScrolling = false;
                const images = document.querySelectorAll('.infinite-scroll-container img');
                images.forEach((img: any) => {
                    // Reset the scroll translateY value
                    img.style.setProperty('--scroll-translate-y', '0px');
                });
            }, 150);
        });

        const wrapper = document.querySelector('.infinite-scroll-wrapper') as HTMLElement;
        const container = document.querySelector('.infinite-scroll-container') as HTMLElement;
        
        if (!wrapper || !container) return;
      

        function raf(time: number) {
            lenis.raf(time);
            if (effectCanvas) effectCanvas.render(scrollVelocity);
            requestAnimationFrame(raf);
        }
        requestAnimationFrame(raf);
    }

    document.addEventListener('astro:page-load', () => {
        if (window.location.pathname === '/overview' || window.location.pathname === '/overview/') {
            initInfiniteScroll();
        }
    });
    
    document.addEventListener('astro:before-preparation', () => {
        if (lenis) {
            lenis.destroy();
        }
        if (effectCanvas) {
            effectCanvas.destroy();
            effectCanvas = null;
        }
        clearTimeout(scrollTimeout);
    });

    let resizeTimeout: ReturnType<typeof setTimeout>;
    window.addEventListener('resize', () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
            if (lenis) {
                lenis.resize();
            }
            if (effectCanvas) {
                effectCanvas.onWindowResize();
            }
        }, 250);
    });
</script>

<style>
    .scroll-translate-img {
        --scroll-translate-y: 0px;
        transform: translateY(var(--scroll-translate-y));
        transition: transform 0.4s ease-out;
    }
    
    @media (hover: hover) {
        .scroll-translate-img:hover {
            transform: translateX(100%) translateY(var(--scroll-translate-y));
        }
    }
    
    @media (hover: none) {
        .group:active .scroll-translate-img {
            transform: translateX(100%) translateY(var(--scroll-translate-y));
        }
        .group:active .absolute {
            transform: translateX(0) !important;
        }
    }
    
    /* Smooth transition when scroll stops */
    .scroll-translate-img:not(:hover) {
        transition: transform 0.4s ease-out;
    }
</style>
